{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
<h2 class="mt-3 text-center">Virtual Terminal</h2>
<hr/>
<form action="javascript:void(0);"
    name="charge_form" id="charge_form"
    class="d-block needs-validation charge-form"
    autocomplete="off" novalidate="">

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount"
            required="" autocomplete="amount-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
            required="" autocomplete="cardholder-name-new">
    </div>


    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
    </div>

    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>

</form>

{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
    let card;
    let stripe;

    const payButton = document.getElementById("pay-button");

    stripe = Stripe("{{index .StringMap "publishable_key"}}");

    function val() {

        let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100)
        
        let payload = {
            amount: amountToCharge,
            currency: 'cad',
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload),
        }

        fetch("{{.API}}/api/payment-intent", requestOptions)
            .then(response => response.text())
            .then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.getElementById("cardholder-name").value,
                            }
                        }
                    }).then(function(result) {
                        if (result.error) {
                            // card declined, or something went wrong with the card
                            alert(result.error.message);
                        } else if(result.paymentIntent) {
                            if (result.paymentIntent.status === "succeeded") {
                                // we have charged the card
                                alert("payment_intent:"+ result.paymentIntent.id + "\npayment_method:"+ result.paymentIntent.payment_method_types[0])
                            }
                        }
                    })
                } catch (err) {
                    alert(err);
                }
            })
    }

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', function(event) {
            if (event.error) {
                alert(event.error.message);
            }
        });
    })();
    </script>
{{end}}